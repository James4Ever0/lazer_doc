{
    "summary": "This code defines \"icombn\" and \"icombn_many\" functions for combining elements from tables, handling recursion and edge cases. It also includes \"combn\", \"combn_many\", and \"powerset\" functions for permutations and combinations in Lua with error checking. The code returns the \"combine\" function that combines and shuffles tables of elements using combination and permutation operations.",
    "details": [
        {
            "comment": "This code defines a function icombn that combines elements from a table into an array and icombn_many which handles multiple tables. The functions use recursion to iterate through the tables and return a combined result. It also checks for edge cases like empty or null arrays, and returns nil when appropriate.",
            "location": "\"/media/root/Prima/works/generated_docs/lazer_doc/src/multilingual/rockstar/newdawn/info_gather/luacombine/combine.lua\":0-52",
            "content": "local combine = {}\nlocal function icombn(tbl,i,n,t,l)\n   t = t or {}\n   l = l or table.getn(tbl)\n   if n == 1 then\n      local j = i\n      return function()\n\t if j > l then return nil end\n\t t[n] = tbl[j]\n\t j = j+1\n\t return t[n]\n      end\n   end\n   local j = i\n   local v = icombn(tbl,j+1,n-1,t)\n   return function()\n      if j > l then return nil end\n      local x = v()\n      if x == nil then\n\t j = j+1\n\t v = icombn(tbl,j+1,n-1,t)\n\t x = v()\n      end\n      if x == nil then return nil end\n      t[n] = tbl[j]\n      return unpack(t)\n   end\nend\nlocal function icombn_many(n,params,t)\n   t = t or {}\n   if n < 1 then return nil end\n   local o = params[n]\n   local l = table.getn(o)\n   if n == 1 then\n      local i = 1\n      return function()\n\t if i > l then return nil end\n\t t[n] = o[i]\n\t i = i+1\n\t return t[n]\n      end\n   end\n   local i = 1\n   local v = icombn_many(n-1, params,t)\n   return function()\n      if i > l then return nil end\n      local x = v()\n      if x == nil then\n\t i = i+1\n\t if i > l or n < 0 then return nil end\n\t v = icombn_many(n-1,params,t)"
        },
        {
            "comment": "This code defines functions for permutations and combinations in Lua, with error checking for invalid inputs. The \"combine\" module contains the functions: \"combn\" for generating combinations and \"combn_many\" for generating combinations from multiple arrays. It also includes the \"powerset\" function to generate all possible subsets of an array.",
            "location": "\"/media/root/Prima/works/generated_docs/lazer_doc/src/multilingual/rockstar/newdawn/info_gather/luacombine/combine.lua\":53-103",
            "content": "\t x = v()\n      end\n      if x == nil then return nil end\n      t[n] = o[i]\n      return unpack(t)\n   end\nend\nlocal function factorial(n)\n   if n == 0 then return 1 end\n   return n * factorial(n-1)\nend\nlocal function combn_no(n,r)\n   return factorial(n)/(factorial(r)*factorial(n-r))\nend\nfunction ipermute(n)\n   local function gen(p,n)\n      if n == 0 then coroutine.yield(p)\n      else\n\t for i=1,n do\n\t    p[n],p[i] = p[i],p[n]\n\t    gen(p,n-1)\n\t    p[n],p[i] = p[i],p[n]\n\t end\n      end\n   end\n   local p = {}; for x=1,n do table.insert(p,x) end\n   local c = coroutine.create(function() gen(p,n) end)\n   return function()\n      local _,r = coroutine.resume(c)\n      return r\n   end\nend\nfunction combine.combn(tbl,n)\n   if n <= 0 or n > table.getn(tbl) then\n      error(\"Need 0 < n <= tbl length.\")\n   end\n   return icombn(tbl,1,n,nil,nil)\nend\nfunction combine.combn_many(...)\n   local params = {...}\n   local l = table.getn(params)\n   if l == 0 then error(\"Need at least one array.\") end\n   return icombn_many(l,params,nil)\nend\nfunction combine.powerset(tbl)"
        },
        {
            "comment": "The code defines a \"combine\" function that combines and shuffles tables of elements. It uses the \"combn_no\", \"icombn\", and \"ipermute\" functions for combination and permutation operations. The \"combine.shuffle\" function shuffles table elements randomly, while \"combine.permute\" generates combinations with repetitions allowed. Finally, the code returns the \"combine\" function.",
            "location": "\"/media/root/Prima/works/generated_docs/lazer_doc/src/multilingual/rockstar/newdawn/info_gather/luacombine/combine.lua\":104-139",
            "content": "   local l,i = table.getn(tbl),1\n   local n,v = combn_no(l,i), icombn(tbl,1,i)\n   return function()\n      n = n-1\n      if n < 0 then\n\t i = i+1\n\t if i > l then return nil end\n\t n = combn_no(l,i) - 1\n\t v = icombn(tbl,1,i)\n      end\n      return v()\n   end\nend\nfunction combine.permute(tbl)\n   local l = table.getn(tbl)\n   if l == 0 then return tbl end\n   local v = ipermute(l)\n   local t = {}\n   return function()\n      local x = v()\n      if x == nil then return nil end\n      for i=1,#x do t[i] = tbl[x[i]] end\n      return unpack(t)\n   end\nend\nfunction combine.shuffle(t)\n   for i = #t, 1, -1 do\n      local j = math.random(i)\n      t[i],t[j]=t[j],t[i]\n   end\n   return t\nend\nreturn combine"
        }
    ]
}