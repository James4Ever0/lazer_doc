{
    "summary": "Code generates Mandelbrot set using complex numbers and numpy library. It defines a function \"mandelbrot\" to calculate the number of iterations for each point in the set, then creates another function \"mandelbrot_set\" to generate the set within specified x and y ranges. Prints the resulting set and its bounds.",
    "details": [
        {
            "comment": "Code generates Mandelbrot set using complex numbers and numpy library. It defines a function \"mandelbrot\" to calculate the number of iterations for each point in the set, then creates another function \"mandelbrot_set\" to generate the set within specified x and y ranges. Prints the resulting set and its bounds.",
            "location": "\"/media/root/Prima/works/generated_docs/lazer_doc/src/multilingual/rockstar/newdawn/info_gather-v0/digData/fractial/jenkin.py\":0-27",
            "content": "import numpy as np\n#from timeit import timeit\ndef mandelbrot(z,maxiter):\n    c = z\n    for n in range(maxiter):\n        if abs(z) > 2:\n            return n\n        z = z*z + c\n    return maxiter\ndef mandelbrot_set(xmin,xmax,ymin,ymax,width,height,maxiter):\n    r1 = np.linspace(xmin, xmax, width)\n    r2 = np.linspace(ymin, ymax, height)\n    sob=[]\n    nuke=\"\"\n    for r in r1:\n        for i in r2:\n            nuke=mandelbrot(complex(r, i),maxiter)\n            print(nuke)\n            sob.append(nuke)\n    return (r1,r2,sob)\n#timeit((lambda: mandelbrot_set(-2.0,0.5,-1.25,1.25,1000,1000,80) ),number=10000)\nprint(mandelbrot_set(-2.0,0.5,-1.25,1.25,1000,1000,80))\n#print(\"-----spliter-----\")\n#timeit((lambda:mandelbrot_set(-0.74877,-0.74872,0.06505,0.06510,1000,1000,2048)),number=10000)"
        }
    ]
}