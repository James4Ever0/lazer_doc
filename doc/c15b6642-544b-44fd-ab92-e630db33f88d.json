{
    "summary": "The function `panasonic` uses recursion to filter a list (a) based on the range given by another list (b), returning either the filtered result or the original list depending on if either list is empty. The function `aka` filters a list (m) removing elements present in another list (e), and then divides it into two lists: one with remaining elements after filtering, and one containing elements removed from (m). Finally, it prints the test case lists, best, and exception, and calls the function `aka` on them.",
    "details": [
        {
            "comment": "The function `panasonic` uses recursion to filter a list (a) based on the range given by another list (b), returning either the filtered result or the original list depending on if either list is empty. The function `aka` filters a list (m) removing elements present in another list (e), and then divides it into two lists: one with remaining elements after filtering, and one containing elements removed from (m). Finally, it prints the test case lists, best, and exception, and calls the function `aka` on them.",
            "location": "\"/media/root/Prima/works/generated_docs/lazer_doc/src/multilingual/rockstar/newdawn/info_gather-v0/pileOfPuke/eneloop.py\":0-22",
            "content": "def panasonic(a,b):\n#    for c in b:\n    if (len(b)==0 or len(a)==0):\n        return a\n    else:\n#        d=[]\n#        for c in a:\n#        print(b)\n#        e=list(filter((lambda x:(x>=b[0][0] and x<= b[0][1])),a))\n#        c+=e\n        return panasonic(list(filter((lambda x:(x<b[0][0] or x>b[0][1])),a)),b[1:])\ndef aka(m,s,e):\n    geek=list(filter((lambda v: v not in e),panasonic(m,s)))\n    return [list(filter((lambda y: y not in geek),m)),geek]\ntest=[1,2,4,5,6,7]\nbest=[[1,2],[6,9]]\nexception=[4]\nprint(test)\nprint(best)\nprint(exception)\nprint(aka(test,best,exception))"
        }
    ]
}