{
    "summary": "Don Libes's Expect script from Dec 8, 2019 simulates Python shell interaction, adjusting for specific programs or devices. The code performs calculations and ends on \"exit()\" expecting EOF.",
    "details": [
        {
            "comment": "This Expect script was generated by autoexpect on December 8, 2019. It is written by Don Libes of NIST. The script might fail due to timing issues and can be fixed by adding a sleep or using the force_conservative setting. This script was run conservatively but may require adjustments to handle specific programs and devices.",
            "location": "\"/media/root/Prima/works/generated_docs/lazer_doc/src/metalearning/methodBank/script.exp\":0-20",
            "content": "#!/data/data/com.termux/files/usr/bin/expect -f\n#\n# This Expect script was generated by autoexpect on Sun Dec  8 12:28:20 2019\n# Expect and autoexpect were both written by Don Libes, NIST.\n#\n# Note that autoexpect does not guarantee a working script.  It\n# necessarily has to guess about certain things.  Two reasons a script\n# might fail are:\n#\n# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,\n# etc.) and devices discard or ignore keystrokes that arrive \"too\n# quickly\" after prompts.  If you find your new script hanging up at\n# one spot, try adding a short sleep just before the previous send.\n# Setting \"force_conservative\" to 1 (see below) makes Expect do this\n# automatically - pausing briefly before sending each character.  This\n# pacifies every program I know of.  The -c flag makes the script do\n# this in the first place.  The -C flag allows you to define a\n# character to toggle this mode off and on.\nset force_conservative 0  ;# set to 1 to force conservative mode even if\n\t\t\t  ;# script wasn't run conservatively originally"
        },
        {
            "comment": "Code snippet checks if $force_conservative is set, then sets send_slow and defines a proc send. The code also mentions that some programs produce different output each time they run and explains how to handle it with -p or -P flags. It sets the timeout to -1, spawns justify.sh script, sets match_max, and provides expect patterns for interaction with the script.",
            "location": "\"/media/root/Prima/works/generated_docs/lazer_doc/src/metalearning/methodBank/script.exp\":21-54",
            "content": "if {$force_conservative} {\n\tset send_slow {1 .1}\n\tproc send {ignore arg} {\n\t\tsleep .1\n\t\texp_send -s -- $arg\n\t}\n}\n#\n# 2) differing output - Some programs produce different output each time\n# they run.  The \"date\" command is an obvious example.  Another is\n# ftp, if it produces throughput statistics at the end of a file\n# transfer.  If this causes a problem, delete these patterns or replace\n# them with wildcards.  An alternative is to use the -p flag (for\n# \"prompt\") which makes Expect only look for the last line of output\n# (i.e., the prompt).  The -P flag allows you to define a character to\n# toggle this mode off and on.\n#\n# Read the man page for more info.\n#\n# -Don\nset timeout -1\nspawn ./justify.sh\nmatch_max 100000\nexpect -exact \"Python 3.7.4 (default, Jul 11 2019, 08:17:56) \\r\n\\[Clang 8.0.7 (https://android.googlesource.com/toolchain/clang b55f2d4ebfd35bf6 on linux\\r\nType \\\"help\\\", \\\"copyright\\\", \\\"credits\\\" or \\\"license\\\" for more information.\\r\n>>> \"\nsend -- \"shit\u007f\"\nexpect -exact \"\b\u001b\\[K\"\nsend -- \"\u007f\"\nexpect -exact \"\b\u001b\\[K\""
        },
        {
            "comment": "The code simulates an interactive Python shell, sending commands and expecting specific outputs. It performs calculations like \"1+1\", \"2+2\", etc., until it reaches the \"exit()\" command, which then expects the End Of File (EOF) to terminate the script.",
            "location": "\"/media/root/Prima/works/generated_docs/lazer_doc/src/metalearning/methodBank/script.exp\":55-72",
            "content": "send -- \"\u007f\"\nexpect -exact \"\b\u001b\\[K\"\nsend -- \"\u007f\"\nexpect -exact \"\b\u001b\\[K\"\nsend -- \"1+1\\r\"\nexpect -exact \"1+1\\r\n2\\r\n>>> \"\nsend -- \"2+2\\r\"\nexpect -exact \"2+2\\r\n4\\r\n>>> \"\nsend -- \"4+4\\r\"\nexpect -exact \"4+4\\r\n8\\r\n>>> \"\nsend -- \"exit()\\r\"\nexpect eof"
        }
    ]
}